@model CafeGocNho_63134417.Models.NHANVIEN

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutThongKe_63134417.cshtml";
}

<div>
    <a title="Quay lại" href="@Url.Action("Index", "NHANVIENs_63134417")" class="px-3 py-1 rounded-xl active:bg-yellow-500 bg-yellow-400"><i class="fa-solid fa-left-long"></i></a>
</div>
<hr />

<div class="w-2/3 mx-auto min-h-[450px] bg-white border-2 rounded-xl p-5 mt-4">
    <div class="flex justify-between">
        <h1 class="font-bold">Chỉnh sửa nhân viên</h1>
        <button type="button" class="open-modal" title="Xóa">
            <img src="~/Images/delete.png" width="32" />
        </button>
        <!-- Modal -->
        <div id="deleteModal" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-white p-6 rounded shadow-lg max-w-sm w-full">
                <h2 class="text-lg font-bold mb-4">Xác nhận xóa</h2>
                <p class="text-sm mb-6">Bạn có chắc chắn muốn xóa nhân viên này không?</p>
                <div class="flex justify-end space-x-4">
                    <!-- Nút Hủy -->
                    <button type="button" id="cancelDelete" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-700">Hủy</button>
                    <!-- Nút Xóa -->
                    <form id="deleteForm" method="post" action="@Url.Action("DeleteConfirmed", "NHANVIENs_63134417")">
                        <input type="hidden" name="MANV" value="@Model.MANV" />
                        <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-700">Xóa</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <hr class="my-4" />

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

<div class="grid grid-cols-2 gap-4 mt-4">
    @Html.HiddenFor(model => model.MANV)
    @Html.HiddenFor(model => model.GIOITINH)
    @Html.HiddenFor(model => model.MATKHAU)

    <div class="form-group">
        @Html.LabelFor(model => model.MANV, "Mã nhân viên", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            <input type="text" value="@Model.MANV" readonly class="bg-gray-200 w-full px-1 py-1 border border-black rounded" />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MACV, "Chức vụ", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.DropDownListFor(
                model => model.MACV,
                new SelectList(new[] {
                    new { Value = "employee", Text = "Nhân viên" },
                    new { Value = "manager", Text = "Quản lý" }
                }, "Value", "Text", Model.MACV),
                new { @class = "w-full px-1 py-1 border border-black rounded" }
            )
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.HONV, "Họ nhân viên", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.HONV, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TENNV, "Tên nhân viên", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TENNV, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EMAIL, "Email", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DIACHI, "Địa chỉ", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DIACHI, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.GIOITINH, "Giới tính", htmlAttributes: new { @class = "font-bold block mb-2" })
            <div class="flex space-x-4 items-center">
                <label class="flex items-center">
                    @Html.RadioButtonFor(model => model.GIOITINH, "1", Model.GIOITINH == "1" ? new { @class = "mr-2", @checked = "checked" } : new { @class = "mr-2" })
                    <span class="text-gray-700">Nam</span>
                </label>
                <label class="flex items-center">
                    @Html.RadioButtonFor(model => model.GIOITINH, "0", Model.GIOITINH == "0" ? new { @class = "mr-2", @checked = "checked" } : new { @class = "mr-2" })
                    <span class="text-gray-700">Nữ</span>
                </label>
            </div>
        </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.SDT, "Số điện thoại", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SDT, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CCCD, "CCCD", htmlAttributes: new { @class = "font-bold w-32 text-left" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CCCD, new { htmlAttributes = new { @class = "w-full px-1 py-1 border border-black rounded" } })
        </div>
    </div>

    <div class="col-span-2 text-center mt-4">
        <button type="submit" class="px-4 py-1 bg-yellow-400 active:bg-yellow-500 rounded-md hover:bg-yellow-600">Lưu thay đổi</button>
    </div>
</div>
    }
</div>
<script>
    // Lấy các phần tử
    const openModalButton = document.querySelector(".open-modal");
    const modal = document.getElementById("deleteModal");
    const cancelDeleteButton = document.getElementById("cancelDelete");

    // Khi nhấn nút "Xóa"
    openModalButton.addEventListener("click", () => {
        modal.classList.remove("hidden"); // Hiển thị modal
    });

    // Khi nhấn "Hủy"
    cancelDeleteButton.addEventListener("click", () => {
        modal.classList.add("hidden"); // Ẩn modal
    });

    // Đóng modal khi nhấn bên ngoài
    modal.addEventListener("click", (e) => {
        if (e.target === modal) {
            modal.classList.add("hidden");
        }
    });
</script>